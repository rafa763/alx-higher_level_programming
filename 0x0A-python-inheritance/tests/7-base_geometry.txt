"""

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> #check with correct params
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)

>>> bg = BaseGeometry()
>>> print(bg.area())
Traceback (most recent call last):
Exception: area() is not implemented

>>> #check with value = 0
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 0)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> #check with negative value
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", -12)
Traceback (most recent call last):
ValueError: my_int must be greater than 0

>>> #check with non int value
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", "test")
Traceback (most recent call last):
TypeError: my_int must be an integer

>>> #check with tuple
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
TypeError: age must be an integer

>>> #check with list
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
TypeError: age must be an integer

>>> #check with bool values
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", True)
Traceback (most recent call last):
TypeError: age must be an integer


>>> #check with dictionary
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
TypeError: age must be an integer

>>> #check with None
>>> bg = BaseGeometry()
>>> bg.integer_validator("age", None)
Traceback (most recent call last):
TypeError: age must be an integer


>>> #missing 1 param
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> #missing 2 params
>>> bg = BaseGeometry()
>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

"""
